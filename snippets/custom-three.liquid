<!-- Background -overlay -->
<div class="three-popup"> 
    <!-- main wrapper -white -->
    <div class="three-popup__wrapper">
        <!-- content container -relative -->
        <div class="three-popup__container">
            <a href="#!" class="close">+</a>
            <div class="three-popup__inner--content">
                <div class="content-main">
                    <canvas id="canvas"></canvas>
                    <ul class="model-options">
                        <li class="option --is-active" data-option="legs">
                            <a href="#!">
                                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/legs.svg" alt="legs">
                            </a>
                        </li>
                        <li class="option" data-option="cushions">
                            <a href="#!">
                                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/cushions.svg" alt="legs">
                            </a>
                        </li>
                        <li class="option" data-option="base">
                            <a href="#!">
                                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/base.svg" alt="legs">
                            </a>
                        </li>
                        <li class="option" data-option="supports">
                            <a href="#!">
                                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/supports.svg" alt="legs">
                            </a>
                        </li>
                        <li class="option" data-option="back">
                            <a href="#!">
                                <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/1376484/back.svg" alt="legs">
                            </a> 
                        </li> 
                    </ul>
                </div>
                <div class="content-footer">
                    <ul class="color-options">
                        <li data-color="66533C" data-type="color" style="background-color: #66533C;"><a href="66533C"></a></li>
                        <li data-color="173A2F" data-type="color" style="background-color: #173A2F;"><a href="173A2F"></a></li>
                        <li data-color="153944" data-type="color" style="background-color: #153944;"><a href="153944"></a></li>
                        <li data-color="27548D" data-type="color" style="background-color: #27548D;"><a href="27548D"></a></li>
                        <li data-color="438AAC" data-type="color" style="background-color: #438AAC;"><a href="438AAC"></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
{%style%}
    .content-footer .color-options {
        display: flex;
        justify-content: center;
    }
    .content-footer .color-options li {
        display: inline-block;
        width: 40px;
        height: 40px;
    }
    .content-footer .color-options li > a:empty {
        display: inline-block;
        width: 100%;
        height: 100%;
    }
{%endstyle%}
<!-- The main three.js file -->
<script src='https://unpkg.com/three@0.127.0/build/three.js'></script>
<!-- This brings in the ability to load custom 3D objects in the .gltf file format. Blender allows the ability to export to this format out the box -->
<script src='https://cdn.jsdelivr.net/gh/mrdoob/three.js@r92/examples/js/loaders/GLTFLoader.js'></script>
<!-- This is a simple to use extension for three.js that activates all the rotating, dragging and zooming controls we need for both mouse and touch, there isn't a clear CDN for this that I can find -->
<script src='https://threejs.org/examples/js/controls/OrbitControls.js'></script>
<!-- JQUERY -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" 
integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" 
crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    const BACKGROUND_COLOR = 0xf1f1f1;
    const MODEL_PATH_OLD = "https://cdn.shopify.com/s/files/1/0566/0613/0259/files/chair.glb?v=1654844356";
    const MODEL_PATH = "https://cdn.shopify.com/s/files/1/0566/0613/0259/files/socks.glb?v=1654846079";
    const width = 630;
    const height = 430;
    const scene = new THREE.Scene();
    var theModel;
    var activeModelPart = 'legs';

    const init = function() {

        // Set background
        scene.background = new THREE.Color(BACKGROUND_COLOR);
        scene.fog = new THREE.Fog(BACKGROUND_COLOR, 20, 100);

        const canvas = document.querySelector('#canvas');
        // init the renderer
        const renderer = new THREE.WebGLRenderer({canvas, antialias:true});
        renderer.shadowMap.enabled = true;
        renderer.setPixelRatio(window.devicePixelRatio);

        const content = document.querySelector('.content-main');
        content.appendChild(renderer.domElement);
        
        // Add a Camera
        var camera = new THREE.PerspectiveCamera(50, 630 / 430, 0.1, 1000);
        camera.position.z = 5;
        camera.position.x = 0;

        const INITIAL_MTL = new THREE.MeshPhongMaterial({color: 0xf1f1f1, shininess: 10}); 
        const INITIAL_MAP = [
            {childID: "back", mtl: INITIAL_MTL},
            {childID: "base", mtl: INITIAL_MTL},
            {childID: "cushions", mtl: INITIAL_MTL},
            {childID: "legs", mtl: INITIAL_MTL},
            {childID: "supports", mtl: INITIAL_MTL},
        ];

        // Function - Add the textures to the models
        function initColor(parent, type, mtl) {
            parent.traverse((o) => {
                if(o.isMesh) {
                    if(o.name.includes(type)) {
                        o.material = mtl;
                        o.nameID = type;
                    }
                }
            })
        }

        // Init the object loader
        var loader = new THREE.GLTFLoader();

        loader.load(MODEL_PATH, function(gltf) {
            theModel = gltf.scene;

            theModel.traverse((o)=> {
                if(o.isMesh) {
                    o.castShadow = false;
                    o.receiveShadow = false;
                }
            });
            // set the models initial scale
            theModel.scale.set(6,6,6);
            theModel.rotation.y = Math.PI;

            // Offset the y position a bit
            theModel.position.y = -1;

            // Set initial textures
            for (let object of INITIAL_MAP) {
                initColor(theModel, object.childID, object.mtl);
            }

            // add the model to the scene
            scene.add(theModel);
        }, undefined, function(err) {console.log(err)});

        // Add lights
        var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.61);
        hemiLight.position.set(0,50,0);
        // add hemisphere light to scene
        scene.add(hemiLight);

        var dirLight = new THREE.DirectionalLight(0xffffff, 0.54);
        dirLight.position.set(-8, 12, 8);
        dirLight.castShadow = true;
        dirLight.shadow.mapSize = new THREE.Vector2(1024, 1024);
        // Add directional light to scene
        scene.add(dirLight);

        // Floor
        var floorGeometry = new THREE.PlaneGeometry(5000, 5000, 1,1);
        var floorMaterial = new THREE.MeshPhongMaterial({
            color: 0xeeeeee,
            shininess: 0
        });

        var floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.rotation.x = -0.5 * Math.PI;
        floor.receiveShadow = true;
        floor.position.y = -1;
        scene.add(floor);

        function resizeRendererToDisplaySize(renderer) {
            const canvas = renderer.domElement;
            var canvasPixelWidth = canvas.width / window.devicePixelRatio;
            var canvasPixelHeight = canvas.height / window.devicePixelRatio;

            const needResize = canvasPixelWidth !== width || canvasPixelHeight != height;
            if(needResize) {
                renderer.setSize(width, height, false);
            }

            return needResize;
        }

        // Add controls
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.maxPolarAngle = Math.PI / 2;
        controls.minPolarAngle = Math.PI / 3;
        controls.enableDamping = true;
        controls.enablePen = false;
        controls.dampingFactor = 0.1;
        controls.autoRotate = false;
        controls.autoRotateSpeed = 2.0;
        controls.enableZoom = false;

        function animate() {
            controls.update();

            renderer.render(scene, camera);
            requestAnimationFrame(animate);

            if(resizeRendererToDisplaySize(renderer)) {
                const canvas = renderer.domElement;
                camera.aspect = canvas.clientWidth / canvas.clientHeight;
                camera.updateProjectionMatrix();
            }
        }

        animate();

        function setMaterial(parent, type, mtl) {
            parent.traverse((o)=> {
                
                if(o.isMesh && o.name != null) {
                    if(o.name == type) {
                        console.log(o);
                        o.material = mtl;                    
                    }
                }
            })
        }

        $('.color-options').on('click', 'li>a', function(e) {
            e.preventDefault();
            $this = $(this);
            
            let new_mtl = new THREE.MeshPhongMaterial({
                color: parseInt('0x'+ $this.parent().data('color')),
                shininess: 10
            });
            setMaterial(theModel, "polySurface1", new_mtl);
        });

        $('#customize').on('click', function(event) {
            event.preventDefault();
            $('.three-popup').toggleClass('--is-visible');

            $('html, body').css({
                overflow: 'hidden',
                height: '100%'
            });
        });

        $('.three-popup__container').on('click', '.close', function(event) {
            event.preventDefault();
            $this = $(this);

            $this.closest('.three-popup').toggleClass('--is-visible');

            $('html, body').css({
                overflow: 'auto',
                height: 'auto'
            });
        });

        $('.model-options').on('click', '.option > a', function(event) {
            event.preventDefault();
            $this = $(this);

            // remove active indicator
            $this.closest('.model-options').children().each(function() {
                $li = $(this);

                if($li.hasClass('--is-active')) {
                    $li.removeClass('--is-active');
                }
            });

            $this.parent().addClass('--is-active');
            activeModelPart = $this.parent().data('option');
        });
    }
 
    // Events
    document.addEventListener('DOMContentLoaded', function() {
        init();
    });
</script>